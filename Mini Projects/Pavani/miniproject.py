# -*- coding: utf-8 -*-
"""MiniProject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1y4xlxOIsPtMnastHpP-FvXq6HZjx8vMX

Project Title: Contact Book Application

Description: Develop a console-based contact book application in Python. The system should be able to handle contacts, where users can add, view, update, and delete contacts.

Features:

Variables & User Input: The system should be able to take the userâ€™s input for various functionalities like adding a contact, viewing contacts, updating a contact, deleting a contact, etc.

Data Types: Use appropriate data types for different kinds of information. For example, use strings for contact names and phone numbers, integers for contact IDs, etc.

Type Conversions: Implement features where type conversions are necessary. For example, converting user input (which is usually a string) to other data types as necessary.

Operators: Use Python operators for various computations and comparisons. For example, checking if a contact already exists or not.

Conditional & Iterative Statements: Use these to control the flow of your program. For example, if a user wants to view the contacts with a certain name, the system should iterate over all contacts and only display those with the specified name.

Strings: Contact details like name and phone number are strings. Implement features to search for contacts by name or phone number.

Inbuilt Data Structures in Python: Use lists and dictionaries to store information about contacts.

Functions: Divide your code into functions, each performing a specific task like adding a contact, viewing contacts, updating a contact, deleting a contact, etc.

OOPS: Define classes for entities like Contact with appropriate attributes and methods.

Files: Store the data about contacts in files so that the information is not lost when you close the program.

Exception Handling: Implement exception handling wherever necessary to prevent your program from crashing due to unexpected errors.
"""

class Contact():
  def __init__(self):
    self.contacts={}

  def save_contacts(self,contacts):
    f=open('contacts.txt', 'w')
    f.write(str(self.contacts))
    f.close()

  def add_contact(self,id, name, phone):
    self.contacts[id]={"name":name,"phone":phone}
    self.save_contacts(self.contacts)

  def view_contact_by_id(self,id):
    if id in self.contacts:
      print(self.contacts[id])
    else:
       print("The id you enter is not there in contacts! ")

  def view_contact_by_name(self,name):
    for key1 in self.contacts.keys():
      for key2 in self.contacts[key1].keys():
        if name == (self.contacts[key1]['name']):
           print(self.contacts[key1])
           return
    print("The name you enter is not there in contacts! ")

  def view_contacts(self):
    try:
      f=open('contacts.txt','r')
      print(f.read())
    except FileNotFoundError:
      return {}

  def update_contact(self,id):
    if id in self.contacts.keys():
        name = input("Enter updated name: ")
        phone = input("Enter updated phone: ")
        self.contacts[id].update({"name":name,"phone":phone})
        self.save_contacts(self.contacts)
        print("Contact Updated successfully!")
    else:
        print("Id not found")

  def delete_contact(self,id):
    if id in self.contacts.keys():
      self.contacts.pop(id)
    else:
      print("Id not found")
    self.save_contacts(self.contacts)

  def number_checking(self,phone):
    for key in self.contacts.keys():
      if phone == self.contacts[key]['phone']:
        print("contact already exists!")
        return
    print("contact does not exist")

obj=Contact()

while True:
  choice=input("""---------------Contact Book Application-----------------------
  1. Add Contact
  2.checking contact with id
  3.checking contact with name
  4. View Contacts
  5.Update Contact
  6.Delete Contact
  7.checking if a contact already exists or not
  8.break----------""")

  if choice == '1':
    id=int(input("enter id: "))
    name = input("Enter contact name: ")
    phone = input("Enter contact phone: ")
    obj.add_contact(id, name, phone)

  elif choice == '2':
    try:
       id=int(input("enter id:"))
       obj.view_contact_by_id(id)
    except:
      print("id must be number so please enter number only")

  elif choice == '3':
      name=input("enter name:")
      obj.view_contact_by_name(name)

  elif choice == '4':
      obj.view_contacts()

  elif choice == '5':
        id = int(input("Enter contact ID to update: "))
        obj.update_contact(id)


  elif choice == '6':
        id = int(input("Enter contact ID to delete: "))
        obj.delete_contact(id)

  elif choice == '7':
      phone=input("enter phone number:")
      obj.number_checking(phone)

  elif choice == '8':
        break
  else:
    print("enter valid number")