# -*- coding: utf-8 -*-
"""Library_management.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xrlpjVTRZDBSEUvzpafYzm_KACsi335g
"""

import json

class Book:
    def __init__(self, book_id, title, author, publisher):
        self.book_id = book_id
        self.title = title
        self.author = author
        self.publisher = publisher
        self.is_borrowed = False

class User:
    def __init__(self, user_id, name):
        self.user_id = user_id
        self.name = name
        self.borrowed_books = []

def save_data(books, users):
    with open("library_data.json", "w") as f:
        data = {
            "books": [vars(book) for book in books],
            "users": [vars(user) for user in users]
        }
        json.dump(data, f)

def load_data():
    try:
        with open("library_data.json", "r") as f:
            data = json.load(f)
            books = [Book(**book_data) for book_data in data["books"]]
            users = [User(**user_data) for user_data in data["users"]]
    except FileNotFoundError:
        books = []
        users = []
    return books, users

def add_book(books, title, author, publisher):
    book_id = len(books) + 1
    book = Book(book_id, title, author, publisher)
    books.append(book)
    print(f"Book '{title}' added to the library.")

def borrow_book(books, users, user_id, book_id):
    user = next((user for user in users if user.user_id == user_id), None)
    book = next((book for book in books if book.book_id == book_id), None)

    if user and book:
        if not book.is_borrowed:
            book.is_borrowed = True
            user.borrowed_books.append(book)
            print(f"Book '{book.title}' has been borrowed by {user.name}.")
        else:
            print(f"Book '{book.title}' is already borrowed.")
    else:
        print("Invalid user ID or book ID.")

def return_book(books, users, user_id, book_id):
    user = next((user for user in users if user.user_id == user_id), None)
    book = next((book for book in users if book.book_id == book_id), None)

    if user and book:
        if book in user.borrowed_books:
            book.is_borrowed = False
            user.borrowed_books.remove(book)
            print(f"Book '{book.title}' has been returned by {user.name}.")
        else:
            print(f"Book '{book.title}' was not borrowed by {user.name}.")
    else:
        print("Invalid user ID or book ID.")

def search_books(books, keyword, by_author=False):
    if by_author:
        results = [book for book in books if keyword.lower() in book.author.lower()]
    else:
        results = [book for book in books if keyword.lower() in book.title.lower()]

    if results:
        for book in results:
            print(f"Book ID: {book.book_id}, Title: {book.title}, Author: {book.author}")
    else:
        print("No matching books found.")

def main():
    books, users = load_data()

    while True:
        print("\nLibrary Management System")
        print("1. Add Book")
        print("2. Borrow Book")
        print("3. Return Book")
        print("4. Search Books")
        print("5. Exit")

        choice = input("Enter your choice: ")

        if choice == "1":
            title = input("Enter book title: ")
            author = input("Enter author name: ")
            publisher = input("Enter publisher: ")
            add_book(books, title, author, publisher)
        elif choice == "2":
            user_id = int(input("Enter your user ID: "))
            book_id = int(input("Enter book ID: "))
            borrow_book(books, users, user_id, book_id)
        elif choice == "3":
            user_id = int(input("Enter your user ID: "))
            book_id = int(input("Enter book ID: "))
            return_book(books, users, user_id, book_id)
        elif choice == "4":
            keyword = input("Enter search keyword: ")
            by_author = input("Search by author? (y/n): ").lower() == "y"
            search_books(books, keyword, by_author)
        elif choice == "5":
            save_data(books, users)
            print("Library data saved. Exiting.")
            break
        else:
            print("Invalid choice. Please select a valid option.")

if __name__ == "__main__":
    main()

